name: KXSS Checker

on:
  schedule:
    - cron: "0 */3 * * *"
  workflow_dispatch:
    inputs:
      custom_target:
        description: 'Specify a target (optional)'
        required: false
        default: ''
      subenum:
        description: 'Enable subdomain enumeration'
        required: false
        default: 'false'
        type: boolean

jobs:
  run-kxss:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Go environment
      uses: actions/setup-go@v5
      with:
        go-version: '^1.21.0'
        cache: false

    - name: Install Tools
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        
        go install -v github.com/tomnomnom/waybackurls@latest || { echo "Failed to install waybackurls"; exit 1; }
        go install -v github.com/Emoe/kxss@latest || { echo "Failed to install kxss"; exit 1; }
        go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest || { echo "Failed to install subfinder"; exit 1; }
        
        waybackurls -h > /dev/null 2>&1 || { echo "waybackurls not working"; exit 1; }
        kxss -h > /dev/null 2>&1 || { echo "kxss not working"; exit 1; }
        subfinder -h > /dev/null 2>&1 || { echo "subfinder not working"; exit 1; }
        
        echo "All tools successfully installed and verified"

    - name: Run KXSS Check
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      run: |
        if [ -n "${{ github.event.inputs.custom_target }}" ]; then
          TARGET="${{ github.event.inputs.custom_target }}"
        else
          TARGET=$(curl -s -f https://raw.githubusercontent.com/arkadiyt/bounty-targets-data/main/data/wildcards.txt | shuf -n 1)
        fi
        
        if [ -z "$TARGET" ]; then
          echo "Error: No target could be obtained"
          exit 1
        fi
        
        echo "Target: $TARGET"

        WAYBACKURLS="$(go env GOPATH)/bin/waybackurls"
        KXSS="$(go env GOPATH)/bin/kxss"

        [ -x "$WAYBACKURLS" ] || { echo "Error: waybackurls not found or not executable"; exit 1; }
        [ -x "$KXSS" ] || { echo "Error: kxss not found or not executable"; exit 1; }

        "$WAYBACKURLS" "$TARGET" | "$KXSS" > result.txt || { echo "KXSS check failed"; exit 1; }

        if grep -E '<|>' result.txt; then
            MESSAGE="ðŸš¨ *kxss found something cool* ðŸš¨\nTarget: *$TARGET*\n\n\`\`\`\n$(cat result.txt | head -n 10)\n\`\`\`\n(Only first 10 lines shown)"
            curl -s -f -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="$MESSAGE" \
                -d parse_mode="Markdown" || echo "Failed to send Telegram notification"
        else
            echo "No XSS payloads found for $TARGET."
        fi
