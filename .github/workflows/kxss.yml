name: KXSS Checker

on:
  schedule:
    - cron: "0 */3 * * *"
  workflow_dispatch:
    inputs:
      custom_target:
        description: 'Specify a target (optional)'
        required: false
        default: ''
      subenum:
        description: 'Enable subdomain enumeration'
        required: false
        default: 'false'
        type: boolean

jobs:
  run-kxss:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Go environment
      run: |
        sudo apt update
        sudo apt install -y golang-go golang
        export PATH=$PATH:/usr/local/go/bin
        echo "Go installed"

    - name: Install Tools
      run: |
        /usr/bin/go install -v github.com/tomnomnom/waybackurls@latest
        /usr/bin/go install -v github.com/Emoe/kxss@latest
        /usr/bin/go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
        echo "Tools installed"

      env:
        PATH: ${{ env.PATH }}:$HOME/go/bin

    - name: Run KXSS Check
      env:
        TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        CHATID: ${{ secrets.TELEGRAM_CHAT_ID }}

      run: |
        if [ -n "${{ github.event.inputs.custom_target }}" ]; then
          TARGET=${{ github.event.inputs.custom_target }}
        else
          TARGET=$(curl -s https://raw.githubusercontent.com/arkadiyt/bounty-targets-data/main/data/wildcards.txt | shuf -n 1)
        fi
        echo "Target: $TARGET"

        WAYBACKURLS='/home/runner/go/bin/waybackurls'
        KXSS='/home/runner/go/bin/kxss'

        if [ -z "$WAYBACKURLS" ] || [ -z "$KXSS" ]; then
          echo "Error: Required tools not found."
          exit 1
        fi

        echo "$TARGET" | "$WAYBACKURLS" | "$KXSS" > result.txt

        if grep -E '<|>' result.txt; then
            MESSAGE="ðŸš¨ *kxss found something cool* ðŸš¨\nTarget: *$TARGET*\n\n\`\`\`\n$(cat result.txt | head -n 10)\n\`\`\`\n(Only first 10 lines shown)"
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
                -d chat_id="${{ secrets.CHAT_ID }}" \
                -d text="$MESSAGE" \
                -d parse_mode="Markdown"
            echo "Notification sent to Telegram."
        else
            echo "No XSS payloads found for $TARGET."
        fi
